image:
  repository: "<ACCOUNT_ID>.dkr.ecr.<AWS_REGION>.amazonaws.com/cognetiks-tech-app"
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 2

service:
  type: ClusterIP
  port: 80
  targetPort: 8000

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

env:
  # We avoid touching repo
  DJANGO_SETTINGS_MODULE: "mysite.settings_local"
  ALLOWED_HOSTS: "*"

db:
  host: ""        
  name: "appdb"
  username: "appuser"
  password: ""    
  port: 5432

service:
  type: LoadBalancer
  port: 80
  targetPort: 8000

  
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"             
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"   
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"

ingress:
  enabled: false        # set true if you install NGINX Ingress and want a hostname
  className: "nginx"
  hosts:
    - host: "django.example.com"
      paths:
        - path: /
          pathType: Prefix
  tls: []               # e.g. - secretName: django-tls, hosts: [django.example.com]

hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s   # scrape interval
    labels:
      release: monitoring 
